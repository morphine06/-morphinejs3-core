{"version":3,"sources":["../src/Services.js"],"names":["Services","loadServices","serviceFiles","globule","find","process","cwd","iService","serviceFile","serviceName","path","basename","substring","length","obj","Object","entries","forEach","index","name","constructorFn"],"mappings":";;;;;;;;AAAA;;AACA;;;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAG,EAAjB,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;SAEeC,Y;;;;;oCAAf,aAA8B;AAC7B,QAAIC,YAAY,GAAGC,iBAAQC,IAAR,CAAaC,OAAO,CAACC,GAAR,KAAgB,sBAA7B,CAAnB;;AAD6B,gCAEpBC,QAFoB;AAG5B,UAAMC,WAAW,GAAGN,YAAY,CAACK,QAAD,CAAhC;;AACA,UAAIE,WAAW,GAAGC,cAAKC,QAAL,CAAcH,WAAd,CAAlB;;AACAC,MAAAA,WAAW,GAAGA,WAAW,CAACG,SAAZ,CAAsB,CAAtB,EAAyBH,WAAW,CAACI,MAAZ,GAAqB,EAA9C,CAAd,CAL4B,CAM5B;;AACA,UAAIC,GAAG,mCAAgBN,WAAhB,iDAAP;AACAO,MAAAA,MAAM,CAACC,OAAP,CAAeF,GAAf,EAAoBG,OAApB,CAA4B,OAAwBC,KAAxB,KAAkC;AAAA,YAAjC,CAACC,IAAD,EAAOC,aAAP,CAAiC;AAC7D;AACApB,QAAAA,QAAQ,CAACS,WAAD,CAAR,GAAwB,IAAIW,aAAJ,EAAxB;AACA,OAHD;AAR4B;;AAE7B,SAAK,IAAIb,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAGL,YAAY,CAACW,MAA/C,EAAuDN,QAAQ,EAA/D,EAAmE;AAAA,mBAA1DA,QAA0D;AAUlE,KAZ4B,CAa7B;;AACA,G;;EAEkC","sourcesContent":["import globule from \"globule\";\nimport path from \"path\";\n\nconst Services = {};\n\n// function Service(services = []) {\n// \tif (services instanceof Array) {\n// \t} else services = [services];\n\n// \treturn function decorator(target, name, descriptor) {\n// \t\t// console.log(\"target\", target, name, descriptor);\n// \t\tif (name) {\n// \t\t\tif (!target._services) target._services = [];\n// \t\t\ttarget._services = [...target._services, ...services];\n// \t\t} else {\n// \t\t\tif (!target.prototype._services) target.prototype._services = [];\n// \t\t\ttarget.prototype._services = [...target.prototype._services, ...services];\n// \t\t}\n// \t};\n// }\n\nasync function loadServices() {\n\tlet serviceFiles = globule.find(process.cwd() + \"/src/**/*.service.js\");\n\tfor (let iService = 0; iService < serviceFiles.length; iService++) {\n\t\tconst serviceFile = serviceFiles[iService];\n\t\tlet serviceName = path.basename(serviceFile);\n\t\tserviceName = serviceName.substring(0, serviceName.length - 11);\n\t\t// global[serviceName] = require(serviceFile);\n\t\tlet obj = await import(serviceFile);\n\t\tObject.entries(obj).forEach(([name, constructorFn], index) => {\n\t\t\t// console.log(\"serviceName\", serviceName);\n\t\t\tServices[serviceName] = new constructorFn();\n\t\t});\n\t}\n\t// console.log(\"Services2\", Services);\n}\n\nexport { Services, loadServices }; //Service,\n"],"file":"Services.js"}