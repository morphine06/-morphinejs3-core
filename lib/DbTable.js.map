{"version":3,"sources":["../src/DbTable.js"],"names":["DbTableExec","require","module","exports","DbTable","constructor","def","DbMysql","connection","modelname","primary","primaryType","primaryLength","fieldName","field","Object","entries","attributes","type","length","createEmpty","row","model","typejs","_ormTypeToDatabaseType","defaultsTo","use","connectionId","exec","select","fields","find","where","whereData","count","findone","create","data","update","updateone","cloneDeep","what","JSON","parse","stringify","replace","destroy","query"],"mappings":"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","sourcesContent":["const DbTableExec = require(\"./DbTableExec\");\n\nmodule.exports = class DbTable {\n\tconstructor(def, DbMysql) {\n\t\tthis.DbMysql = DbMysql;\n\t\tthis.def = def;\n\t\tthis.connection = DbMysql.connection;\n\t\tthis.modelname = this.def.modelname;\n\t\tthis.primary = \"\";\n\t\tthis.primaryType = \"integer\";\n\t\tthis.primaryLength = 11;\n\t\tfor (const [fieldName, field] of Object.entries(this.def.attributes)) {\n\t\t\tif (field.primary) {\n\t\t\t\tthis.primary = fieldName;\n\t\t\t\tthis.primaryType = field.type;\n\t\t\t\tif (field.length) this.primaryLength = field.length;\n\t\t\t}\n\t\t}\n\t}\n\tcreateEmpty() {\n\t\tlet row = {};\n\t\tfor (const [fieldName, field] of Object.entries(this.def.attributes)) {\n\t\t\tif (field.model) continue;\n\t\t\trow[fieldName] = \"\";\n\t\t\tlet typejs = this.DbMysql._ormTypeToDatabaseType(field.type, \"\", \"typejs\");\n\t\t\tif (typejs == \"number\") row[fieldName] = 0;\n\t\t\tif (typejs == \"date\") row[fieldName] = null;\n\t\t\tif (typejs == \"boolean\") row[fieldName] = false;\n\t\t\tif (field.defaultsTo) row[fieldName] = field.defaultsTo;\n\t\t}\n\t\treturn row;\n\t}\n\tuse(connectionId) {\n\t\tlet exec = new DbTableExec(this);\n\t\treturn exec;\n\t}\n\tselect(fields) {\n\t\tlet exec = new DbTableExec(this);\n\t\treturn exec.select(fields);\n\t}\n\tfind(where, whereData) {\n\t\tlet exec = new DbTableExec(this);\n\t\treturn exec.find(where, whereData);\n\t}\n\tcount(where, whereData) {\n\t\tlet exec = new DbTableExec(this);\n\t\treturn exec.count(where, whereData);\n\t}\n\tfindone(where, whereData) {\n\t\tlet exec = new DbTableExec(this);\n\t\treturn exec.findone(where, whereData);\n\t}\n\tcreate(data) {\n\t\tlet exec = new DbTableExec(this);\n\t\treturn exec.create(data);\n\t}\n\tupdate(where, whereData, data) {\n\t\tlet exec = new DbTableExec(this);\n\t\treturn exec.update(where, whereData, data);\n\t}\n\tupdateone(where, whereData, data) {\n\t\tlet exec = new DbTableExec(this);\n\t\treturn exec.updateone(where, whereData, data);\n\t}\n\tcloneDeep(what) {\n\t\treturn JSON.parse(JSON.stringify(what));\n\t}\n\treplace(data) {\n\t\tlet exec = new DbTableExec(this);\n\t\treturn exec.replace(data);\n\t}\n\t// async replace(where, whereData, data, returnCompleteRow) {\n\t// \tlet where2 = this.cloneDeep(where);\n\t// \tlet whereData2 = this.cloneDeep(whereData);\n\t// \tlet _rowold = await this.findone(where, whereData).exec();\n\t// \tif (!_rowold) {\n\t// \t\tlet idTemp = await this.create(data).exec();\n\t// \t\tif (returnCompleteRow) {\n\t// \t\t\tlet _row = await this.findone(idTemp).exec();\n\t// \t\t\treturn { row: _row, rowold: null };\n\t// \t\t} else return { id: idTemp, rowold: null };\n\t// \t} else {\n\t// \t\tlet rows = await this.update(where2, whereData2, data).exec(returnCompleteRow);\n\t// \t\tif (returnCompleteRow && rows.length) return { row: rows[0], rowold: _rowold };\n\t// \t\treturn { id: _rowold[this.primary], rowold: _rowold };\n\t// \t}\n\t// }\n\tdestroy(where, whereData) {\n\t\tlet exec = new DbTableExec(this);\n\t\treturn exec.destroy(where, whereData);\n\t}\n\tquery(query, data) {\n\t\tlet exec = new DbTableExec(this);\n\t\treturn exec.query(query, data);\n\t}\n};\n"],"file":"DbTable.js"}