{"version":3,"sources":["../src/main.js"],"names":["chalk","require","http","rootDir","process","cwd","MorphineJs","constructor","initDb","DbMysql","init","Config","mysql","executeMigration","Migration","update","initExpress","initMiddlewares","initHttpServer","httpserver","createServer","App","Promise","accept","reject","listen","app","port","console","warn","green","host","mode","initResSendData","req","res","next","Services","ErrorCodes","sendData","errorKeyOrData","status","data","err","getErrorCode","meta","send","notFound","start"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;AAVA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAWA,IAAME,OAAO,GAAGC,OAAO,CAACC,GAAR,EAAhB;;AAEA,IAAMC,UAAU,GAAG,MAAM;AACxBC,EAAAA,WAAW,GAAG,CAAE;;AAEVC,EAAAA,MAAM,GAAG;AAAA;AACd,YAAMC,iBAAQC,IAAR,CAAaC,eAAOC,KAApB,CAAN;AADc;AAEd;;AACKC,EAAAA,gBAAgB,GAAG;AAAA;AACxBC,yBAAUC,MAAV;AADwB;AAExB;;AACKC,EAAAA,WAAW,GAAG;AAAA;AAAE;;AAChBC,EAAAA,eAAe,GAAG;AAAA;AAAE;;AACpBC,EAAAA,cAAc,GAAG;AAAA;AACtB,UAAIC,UAAU,GAAGjB,IAAI,CAACkB,YAAL,CAAkBC,QAAlB,CAAjB;AACA,YAAM,IAAIC,OAAJ,CAAY,CAACC,MAAD,EAASC,MAAT,KAAoB;AACrCL,QAAAA,UAAU,CAACM,MAAX,CAAkBd,eAAOe,GAAP,CAAWC,IAA7B,EAAmC,MAAM;AACxCJ,UAAAA,MAAM;AACN,SAFD;AAGA,OAJK,CAAN;AAKAK,MAAAA,OAAO,CAACC,IAAR,CAAa7B,KAAK,CAAC8B,KAAN,wBAA4BnB,eAAOe,GAAP,CAAWK,IAAvC,kBAAmDpB,eAAOe,GAAP,CAAWM,IAA9D,EAAb;AACA,aAAOb,UAAP;AARsB;AAStB;;AACDc,EAAAA,eAAe,GAAG;AACjB,WAAO,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAChC,UAAI,CAACC,mBAASC,UAAd,EAA0B,OAAOF,IAAI,EAAX;;AAC1BD,MAAAA,GAAG,CAACI,QAAJ,GAAe,UAAUC,cAAV,EAAwC;AAAA,YAAdC,MAAc,uEAAL,GAAK;AACtD,YAAIC,IAAJ;AACAF,QAAAA,cAAc,GAAGA,cAAc,IAAI,EAAnC;;AACA,YAAIA,cAAc,IAAI,OAAOA,cAAP,KAA0B,QAAhD,EAA0D;AACzDE,UAAAA,IAAI,GAAG;AAAEC,YAAAA,GAAG,EAAEN,mBAASC,UAAT,CAAoBM,YAApB,CAAiCJ,cAAjC;AAAP,WAAP;AACAC,UAAAA,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASF,MAAlB;AACA,SAHD,MAGO;AACNC,UAAAA,IAAI,GAAGF,cAAP;AACAE,UAAAA,IAAI,CAACC,GAAL,GAAW,IAAX;AACA,cAAI,CAACD,IAAI,CAACG,IAAV,EAAgBH,IAAI,CAACG,IAAL,GAAY,EAAZ;AAChB;;AACDV,QAAAA,GAAG,CAACM,MAAJ,CAAWA,MAAX,EAAmBK,IAAnB,CAAwBJ,IAAxB;AACA,OAZD;;AAaAN,MAAAA,IAAI;AACJ,KAhBD;AAiBA;;AACKW,EAAAA,QAAQ,GAAG;AAAA;AAAE;;AAEbC,EAAAA,KAAK,GAAG;AAAA;;AAAA;AACb,YAAM,KAAI,CAACxC,MAAL,EAAN;AACA,YAAM,KAAI,CAACK,gBAAL,EAAN,CAFa,CAGb;;AACA,YAAM,KAAI,CAACG,WAAL,EAAN;AACA,YAAM,KAAI,CAACC,eAAL,EAAN,CALa,CAMb;;AACA,MAAA,KAAI,CAACE,UAAL,SAAwB,KAAI,CAACD,cAAL,EAAxB;AAPa;AAQb;;AAlDuB,CAAzB","sourcesContent":["const chalk = require(\"chalk\");\nconst http = require(\"http\");\n\nimport { App } from \"./App\";\nimport { Services, Service, loadServices } from \"./Services\";\nimport { Config } from \"./Config\";\nimport { Controller, loadControllers } from \"./Controller\";\nimport { Get, Post, Put, Delete, Crud } from \"./MethodDecorators\";\nimport { Middlewares, Middleware, loadRoutesMiddlewares } from \"./Middlewares\";\n\nimport { DbMysql, Model, Models, Migration } from \"./DbMysql\";\n\nconst rootDir = process.cwd();\n\nconst MorphineJs = class {\n\tconstructor() {}\n\n\tasync initDb() {\n\t\tawait DbMysql.init(Config.mysql);\n\t}\n\tasync executeMigration() {\n\t\tMigration.update();\n\t}\n\tasync initExpress() {}\n\tasync initMiddlewares() {}\n\tasync initHttpServer() {\n\t\tlet httpserver = http.createServer(App);\n\t\tawait new Promise((accept, reject) => {\n\t\t\thttpserver.listen(Config.app.port, () => {\n\t\t\t\taccept();\n\t\t\t});\n\t\t});\n\t\tconsole.warn(chalk.green(`Listening on ${Config.app.host} ! - ${Config.app.mode}`));\n\t\treturn httpserver;\n\t}\n\tinitResSendData() {\n\t\treturn function (req, res, next) {\n\t\t\tif (!Services.ErrorCodes) return next();\n\t\t\tres.sendData = function (errorKeyOrData, status = 200) {\n\t\t\t\tlet data;\n\t\t\t\terrorKeyOrData = errorKeyOrData || {};\n\t\t\t\tif (errorKeyOrData && typeof errorKeyOrData === \"string\") {\n\t\t\t\t\tdata = { err: Services.ErrorCodes.getErrorCode(errorKeyOrData) };\n\t\t\t\t\tstatus = data.err.status;\n\t\t\t\t} else {\n\t\t\t\t\tdata = errorKeyOrData;\n\t\t\t\t\tdata.err = null;\n\t\t\t\t\tif (!data.meta) data.meta = {};\n\t\t\t\t}\n\t\t\t\tres.status(status).send(data);\n\t\t\t};\n\t\t\tnext();\n\t\t};\n\t}\n\tasync notFound() {}\n\n\tasync start() {\n\t\tawait this.initDb();\n\t\tawait this.executeMigration();\n\t\t// await loadServices();\n\t\tawait this.initExpress();\n\t\tawait this.initMiddlewares();\n\t\t// this.initResSendData();\n\t\tthis.httpserver = await this.initHttpServer();\n\t}\n};\n\nexport {\n\trootDir,\n\tMorphineJs,\n\tConfig,\n\tApp,\n\tController,\n\tCrud,\n\tGet,\n\tPost,\n\tPut,\n\tDelete,\n\tDbMysql,\n\tModels,\n\tModel,\n\tServices,\n\tService,\n\tMiddleware,\n\tMiddlewares,\n\tMigration,\n\tloadRoutesMiddlewares,\n\tloadControllers,\n\tloadServices,\n};\n"],"file":"main.js"}